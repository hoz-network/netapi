syntax = "proto3";

package hoz.proto.v1.game;

option java_multiple_files = true;
option java_package = "net.hoz.api.service";

import "hoz/proto/v1/data/CommonData.proto";
import "hoz/proto/v1/game/GameData.proto";
import "hoz/proto/v1/game/GameStore.proto";
import "hoz/proto/v1/game/GameResourceSpawner.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "resulter/proto/Resulter.proto";

message MGameType {
  hoz.proto.v1.data.GameType type = 1;
}

service NetGameService {
  rpc oneByName(google.protobuf.StringValue) returns (hoz.proto.v1.data.ResultableData);
  rpc oneById(hoz.proto.v1.data.WUUID) returns (hoz.proto.v1.data.ResultableData);

  rpc all(MGameType) returns (stream hoz.proto.v1.game.NetGame);

  rpc allConfigs(MGameType) returns (stream hoz.proto.v1.game.GameConfigHolder);
  rpc allStores(MGameType) returns (stream hoz.proto.v1.game.StoreHolder);
  rpc allSpawnerTypes(MGameType) returns (stream hoz.proto.v1.game.GameSpawnerTypeHolder);

  rpc saveGame(hoz.proto.v1.game.NetGame) returns (hoz.proto.v1.data.ResultableData);
  rpc saveSpawnerType(GameSpawnerTypeHolder) returns (resulter.proto.GrpcResultable);

  rpc subscribeForGameUpdates(MGameType) returns (stream hoz.proto.v1.game.NetGame);
  rpc subscribeForConfigUpdates(MGameType) returns (stream hoz.proto.v1.game.GameConfigHolder);
  rpc subscribeForStoreUpdates(MGameType) returns (stream hoz.proto.v1.game.GameSpawnerTypeHolder);
  rpc subscribeForSpawnerUpdates(MGameType) returns (stream hoz.proto.v1.game.StoreHolder);
}