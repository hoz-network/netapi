syntax = "proto3";

package hoz.proto.service;

option java_multiple_files = true;
option java_package = "net.hoz.api.service.party";

import "google/protobuf/empty.proto";

import "hoz/proto/Commons.proto";
import "hoz/proto/data/PlayerData.proto";
import "hoz/proto/data/PartyData.proto";

message PartyIdRequest {
  string ownerUuid = 1;
}

message PartyIdResult {
  string uuid = 1;
  Result result = 2;
}

message PartyJoinRequest {
  string uuid = 1;
  string requesterUuid = 2;
}

message PartyJoinResult {
  string uuid = 1;
  Result result = 2;
}

message PartyKickRequest {
  string uuid = 1;
  string toBeKickedUuid = 2;
}

message PartyKickResult {
  string uuid = 1;
  Result result = 2;
}

message PartyLeaveRequest {
  string uuid = 1;
  string toLeaveUuid = 2;
}

message PartyLeaveResult {
  string uuid = 1;
  Result result = 2;
}

message PartySwitchServerRequest {
  string uuid = 1;
  string fromServerUuid = 2;
  string toServerUuid = 3;
}

message PartySwitchServerResult {
  string uuid = 1;
  Result result = 2;
}

message PartyDataRequest {
  string uuid = 1;
}

message PartyDataResult {
  hoz.proto.data.PartyDataContainer partyData = 1;
  Result result = 2;
}

message PartyInvitesRequest {
  string uuid = 1;
}

message PartyInvitesResult {
  hoz.proto.data.PartyInviteData inviteData = 1;
  Result result = 2;
}

message PartyInviteRequest {
  hoz.proto.data.PartyInviteData invite = 1;
}

message PartyInviteUpdate {
  string uuid = 1;
  hoz.proto.data.InviteState inviteState = 2;
}

message PartyDataUpdate {
  string uuid = 1;
  hoz.proto.data.PlayerDataContainer playerData = 2;
}

message PartyCountUpdate {
  int64 partyCount = 1;
}

service PartyService {
  rpc requestPartyUuid(PartyIdRequest) returns (PartyIdResult);
  rpc requestPartyJoin(PartyJoinRequest) returns (PartyJoinResult);
  rpc requestPartyKick(PartyKickRequest) returns (PartyKickResult);
  rpc requestPartyLeave(PartyLeaveRequest) returns (PartyLeaveRequest);
  rpc requestPartyInvite(PartyInviteRequest) returns (PartyInviteUpdate);
  rpc requestPartyData(PartyDataRequest) returns (PartyDataResult);
  rpc requestPartyInvites(PartyInviteRequest) returns (stream PartyInvitesResult);
  rpc requestPartiesCount(google.protobuf.Empty) returns (PartyCountUpdate);

  rpc updatePartyData(PartyDataUpdate) returns (google.protobuf.Empty);
  rpc updateInviteData(PartyInviteUpdate) returns (google.protobuf.Empty);

  rpc listenForPartyDataUpdates(google.protobuf.Empty) returns (stream PartyDataUpdate);
  rpc listenForPartyInvitesUpdates(google.protobuf.Empty) returns (stream PartyInviteUpdate);
}